######################## lecture 122 ############################

minikube start --driver=docker --force

kubectl

minikube

kubectl get nodes

minikube status

kubectl version


####################### lecture 123 ##############################

kubectl get nodes

kubectl get pod

kubectl get services

kubectl create -h

----------------- creating deployment -----------------------------

kubectl create deployment nginx-depl --image=nginx

kubectl get deployment

kubectl get pod

kubectl get replicaset
 
kubectl edit deployment nginx-depl  --> changing the nginx image version=> nginx:1.16

kubectl get pod

kubectl get replicaset

kubectl logs <pod name>

--------------------- creating another deployment to see logs ----------------------

kubectl create deployment mongo-depl --image=mongo

kubectl get pod

kubectl logs <pod name>

kubectl get pod

kubectl describe pod <pod name>

kubectl get pod

kubectl logs <pod name>

kubectl exec -it <pod name>    --> going inside the container via this command
exit

------------------- deletind deployment, applying configuration file -------------------

kubectl get deployment

kubectl get pod

kubectl delete deployment <Deployment name>

kubectl get pod

kubectl delete deployment <Deployment name>

kubectl get replicaset

deploment Eg: [kubectl create deployment name image option1 option2]

----------------------------- creating basic deployment file -------------------------------

touch nginx-deployment.yaml

vim nginx-deployment.yaml   ---> [video - 13:40]

kubectl apply -f nginx-deployment.yaml

kubectl get pod

vim nginx-deployment.yaml  ------> increasing no. of replicas

kubectl apply -f nginx-deployment.yaml

kubectl get deployment

kubectl get replicaset

kubectl get pod
 


---------------------------- nginx-deployment.yamlfile -------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
     
---------------------- corrected Deployment file from chatgpt --------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:  # "containers" instead of "container"
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80  # Note the corrected indentation


###################################### lecture 124 ####################################################

##### nginx-service.yml file #####

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetport: 8080

------ recreated via chatgpt --------

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080



kubectl get pods -o wide

kubectl get deployment nginx-deployment -o yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"nginx"},"name":"nginx-deployment","namespace":"default"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"nginx"}},"template":{"metadata":{"labels":{"app":"nginx"}},"spec":{"containers":[{"image":"nginx","name":"nginx","ports":[{"containerPort":8080}]}]}}}}
  creationTimestamp: "2024-05-14T14:42:01Z"
  generation: 7
  labels:
    app: nginx
  name: nginx-deployment
  namespace: default
  resourceVersion: "42344"
  uid: 9a6ffaf2-018c-4aec-a236-5a34139bc217
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nginx
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 2
  conditions:
  - lastTransitionTime: "2024-05-14T14:42:02Z"
    lastUpdateTime: "2024-05-14T19:33:34Z"
    message: ReplicaSet "nginx-deployment-746c76c447" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  - lastTransitionTime: "2024-05-14T19:44:24Z"
    lastUpdateTime: "2024-05-14T19:44:24Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  observedGeneration: 7
  readyReplicas: 2
  replicas: 2
  updatedReplicas: 2

kubectl delete -f nginx-deployment.yml

kubectl delete -f nginx-service.yml





